@page
@model Howzit.Pages.MainModel
@{
    ViewData["Title"] = "Feed";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Posts Feed</title>
    <link rel="stylesheet" href="~/css/site.css">
</head>
<body>
    <div class="app-container">
        <div class="header">
            <div class="tabs">
                <button class="tab btn btn-light me-1" onclick="fetchPosts('new')" @(Model.SortBy == "new" ? "active" : "")>New</button>
                <button class="tab btn btn-light" onclick="fetchPosts('hot')" @(Model.SortBy == "hot" ? "active" : "")>Hot</button>
                <button class="submit tab btn btn-light edit-icon" onclick="redirectWithLocation()">✏️</button>

            </div>
        </div>

        <div class="feed" id="posts-container">
            @if (Model.Posts == null || !Model.Posts.Any())
            {
                <p class="text-center text-muted">No posts available.</p>
            }
            else
            {
                @foreach (var post in Model.Posts)
                {
                    <a href="/Comments?postId=@post.ObjectId" class="text-decoration-none text-dark">
                        <div class="post">
                            <div class="post-text">
                                <p class="card-text">@post.StatusMessage</p>
                                @if (post.PhotoFile != null)
                                {
                                    <div class="post-image mb-3 text-center">
                                        <img src="@post.PhotoFile.Url" class="img-fluid rounded" alt="Post Image" style="max-height: 300px; object-fit: cover;">
                                    </div>
                                }
                            </div>
                            <div class="post-info">
                                <span class="time">@post.GetTimeAgo()</span>
                                <span class="replies">
                                    @if (post.Comments > 1)
                                    {
                                        <span>@post.Comments Comments</span>
                                    }
                                    else if (post.Comments == 1)
                                    {
                                        <span>1 Comment</span>
                                    }
                                    else
                                    {
                                        <!-- <span>No comments yet</span> -->
                                    }
                                </span>

                                <!-- Delete Button for Post Owner -->
                                @if (post.User.ObjectId == Model.CurrentUser?.ObjectId)
                                {
                                    <div class="d-flex justify-content-end align-items-center px-3 pb-2">
                                        <!-- Edit Button -->
                                        <button class="btn btn-sm btn-outline-primary me-2"
                                                onclick="event.preventDefault(); event.stopPropagation(); showEditForm('@post.ObjectId', '@post.StatusMessage')">
                                            ✏️ Edit
                                        </button>
                                        <!-- Delete Button -->
                                        <form method="post" asp-page-handler="Delete" onsubmit="return confirm('Are you sure you want to delete this post?')">
                                            <input type="hidden" name="postId" value="@post.ObjectId" />
                                            <button type="submit" class="btn btn-sm btn-outline-danger">🗑️ Delete</button>
                                        </form>
                                    </div>
                                }
                            </div>
                            <div class="vote-section">
                                <form method="post" asp-page-handler="Vote" class="d-inline">
                                    <input type="hidden" name="postId" value="@post.ObjectId" />
                                    <input type="hidden" name="isUpvote" value="true" />
                                    <button type="submit" class="vote-button">▲</button>
                                </form>
                                <div class="upvote-count">@post.VoteCount</div>
                                <form method="post" asp-page-handler="Vote" class="d-inline">
                                    <input type="hidden" name="postId" value="@post.ObjectId" />
                                    <input type="hidden" name="isDownvote" value="true" />
                                    <button type="submit" class="vote-button">▼</button>
                                </form>
                            </div>
                        </div>
                    </a>
                }
            }
        </div>

    </div>

    <script>
        function fetchPosts(sortBy) {
            const postsContainer = document.getElementById("posts-container");
            postsContainer.innerHTML = '<p class="text-center text-muted">Loading...</p>'; // Optional loading spinner

            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        const latitude = position.coords.latitude;
                        const longitude = position.coords.longitude;

                        fetch(`/Main?sortBy=${sortBy}&latitude=${latitude}&longitude=${longitude}`, {
                            headers: { "X-Requested-With": "XMLHttpRequest" },
                        })
                            .then((response) => response.json())
                            .then((posts) => {
                                console.log("Fetched posts:", posts); // Debugging line

                                postsContainer.innerHTML = "";

                                if (!posts || posts.length === 0) {
                                    postsContainer.innerHTML = '<p class="text-center text-muted">No posts available.</p>';
                                    return;
                                }

                                posts.forEach((post) => {
                                    const postHtml = `
                                        <a href="/Comments?postId=${post.id}" class="text-decoration-none text-dark">
                                            <div class="post">
                                                <div class="post-text">
                                                    <p class="card-text">${post.statusMessage || "No content available"}</p>
                                                    ${post.photoFile
                                            ? `<div class="post-image mb-3 text-center">
                                                                <img src="${post.photoFile.url}" class="img-fluid rounded" alt="Post Image" style="max-height: 300px; object-fit: cover;">
                                                               </div>`
                                            : ""
                                        }
                                                </div>
                                                <div class="post-info">
                                                    <span class="time">${formatTime(post.createdTime)}</span>
                                                    <span class="replies">
                                                        ${post.comments > 1
                                            ? `<span>${post.comments} Comments</span>`
                                            : post.comments === 1
                                                ? `<span>1 Comment</span>`
                                                : `<span>No comments yet</span>`
                                        }
                                                    </span>
                                                </div>
                                                <div class="vote-section">
                                                    <div class="upvote-count">${post.voteCount}</div>
                                                </div>
                                            </div>
                                        </a>
                                    `;
                                    postsContainer.insertAdjacentHTML("beforeend", postHtml);
                                });
                            })
                            .catch((error) => {
                                console.error("Failed to fetch posts:", error);
                                postsContainer.innerHTML = '<p class="text-center text-danger">Error loading posts.</p>';
                            });
                    },
                    (error) => {
                        console.error("Error getting location:", error.message);
                        postsContainer.innerHTML = '<p class="text-center text-muted">Unable to get location.</p>';
                    }
                );
            } else {
                console.error("Geolocation is not supported by this browser.");
                postsContainer.innerHTML = '<p class="text-center text-muted">Geolocation not supported.</p>';
            }
        }

        // Helper function to format time
        function formatTime(isoString) {
            const date = new Date(isoString);
            return date.toLocaleString(); // Adjust as needed for your time format
        }


        function redirectWithLocation() {
            navigator.geolocation.getCurrentPosition(function (position) {
                const latitude = position.coords.latitude;
                const longitude = position.coords.longitude;

                // Redirect to the Post page with latitude and longitude
                window.location.href = `/Post/${latitude}/${longitude}`;
            }, function (error) {
                alert("Unable to retrieve location. Please enable location services.");
            });
        }

        function confirmDelete(postId) {
            if (confirm("Are you sure you want to delete this post?")) {
                const form = document.createElement('form');
                form.method = 'post';
                form.action = `?handler=Delete`;

                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'postId';
                input.value = postId;

                form.appendChild(input);
                document.body.appendChild(form);
                form.submit();
            }
        }

        function showEditForm(postId, currentContent) {
            document.getElementById('editPostId').value = postId;
            document.getElementById('editPostContent').value = currentContent;
            new bootstrap.Modal(document.getElementById('editModal')).show();
        }

    </script>

    <div id="editModal" class="modal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Post</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form method="post" asp-page-handler="Edit">
                    <div class="modal-body">
                        <input type="hidden" id="editPostId" name="postId" />
                        <textarea id="editPostContent" name="statusMessage" class="form-control" rows="4"></textarea>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</body>
</html>
